FPCAuthentication, Bastien Aracil 2011 (femtoparsec.net)


*************
* Copyright *
*************

    Copyright (c) 2011, Bastien Aracil
    All rights reserved.
    New BSD license. See http://en.wikipedia.org/wiki/Bsd_license

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
       * Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.
       * Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in the
         documentation and/or other materials provided with the distribution.
       * The name of Bastien Aracil may not be used to endorse or promote products
         derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL BASTIEN ARACIL BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


************
* Versions *
************

V1.0  - 10/2011 current - Creation of the document.


************
* Overview *
************

FPCAuthentication is an AMFPHP plugin that manages authentication of user with a login and a password. The authentication is

*****************
* Compatibility *
*****************

Plugin Version    |     AMFPHP Version
------------------+-------------------
v1.0              |     v2.0

****************
* Installation *
****************

The installation consists in copying to the plugin directory of AMFPHP the directory 'FPCAuthentication' at the same level than this file (not the directory including this file).

*****************
* Configuration *
*****************

To work properly the plugin needs a way to check to password of the user trying to authenticate.
This is done by setting the mandatory configuration parameter 'authenticator' with an implementation
of the interface 'FPCAuthentication_IAuthenticator' (see below for more details).

The plugin has an optional configuration parameter 'builder'. This allows the customization of the
result returned by the authentication process. By default this result is an associative array containing
the login and the roles of the user.

***********************
* How to configure it *
***********************

First, the developer needs to create his own implementation of the interface 'FPCAuthentication_IAuthenticator'.
This interface defines the two methods 'authenticate' and 'getRoles'.

The first one gets, as parameters, the login and the password of the user trying to authenticate
and should returns a non-null object if the authentication succeeds, null otherwise.

The method 'getRoles' gets, as parameters, the login and the result of the 'authenticate' method and should returns
a non-null array of string listing the roles attributed to the authenticated user.

A simple implementation could be something like this :

class SimpleAuthenticator implements FPCAuthentication_IAuthenticator {
    /**
     * @param $login login of the user trying to authenticate
     * @param $password password of the user trying to authenticate
     * @return mixed null if the authentication failed, otherwise any not null data.
     * In case of success, the result of this method will be passed as the second parameter
     * of the 'getRoles' method
     */
    function authenticate($login, $password)
    {
        $ok = false;
        if ($login == "admin") {
            $ok = $password == "adminPassword";
        }
        else if ($login == "user1") {
            $ok = $password == "user1";
        }

        return $ok?"something":null;
    }

    /**
     *
     * @param $login login of the user trying to authenticate
     * @param $token the result of the 'authenticate' method.
     * @return array of string that define the roles of the authenticated user
     */
    function getRoles($login, $token)
    {
        //$token is not used but is equal to the string "something"
        if ($login == "admin") {
            return array('USER_RIGHT_EDITOR','USER_INFO_EDITOR', 'USERS_EDITOR');
        }
        else if ($login == "user1") {
            return array('USER_RIGHT_READER','USER_INFO_READER');
        }

        //this should never happen since getRoles is called only if the authentication succeeded
        return array();
    }
}

Then the developer needs to configure the plugin to use this authenticator.
This is done with the default AMFPHP procedure. In the gateway file :

$config->pluginsConfig['FPCPlugin'] = array("authenticator" => new SimpleAuthenticator()));

*****************
* How to use it *
*****************

Assuming the configuration of the plugin is done; the authentication of a user from Flex is simply done
by calling the method 'authenticate' of the "fake service" 'fpclogin'. "fake service" means that the service
does not exist actually, the plugin intercepts any call to a service named fpclogin and handles the called
method.

For instance, you can use something like this :

    public function authenticate(login:String,  password:String):void {
        var gwConnection:NetConnection = new NetConnection();
            gwConnection.connect(URI_TO_THE_AMFPHP_GATEWAY);
            gwConnection.call("fpcplugin/authenticate", new Responder(onSucceed, onFail), login, password);
            gwConnection.close();
    }

    private function onSucceed(response:*):void {
    //user authenticated, proceed.
    }

    private function onFail(response:*):void {
    //authentication failed. Maybe ask again his password.
    }

If the authentication fails, an exception is throw otherwise the plugin returns, by default, an object with the properties
'login' and 'roles' set to the user login and roles (an array of string).

To logout the user, the 'logout' method of the same "fake service" fpclogin must be called. For instance with something like this :

    public function authenticate(login:String,  password:String):void {
        var gwConnection:NetConnection = new NetConnection();
            gwConnection.connect(URI_TO_THE_AMFPHP_GATEWAY);
            gwConnection.call("fpcplugin/logout", new Responder(onLogoutSucceed, onLogoutFail), login, password);
            gwConnection.close();
    }


**********************************
* Integration with ServiceAccess *
**********************************

This plugin is designed to easily work with the ServiceAccess plugin. In fact, if you use FPCAuthentication then
ServiceAccess will work out-of-the-box, no configuration will be needed for it and you will be able
to use annotations to secure your services.

******************************
* Authentication Information *
******************************

After any attempt to authenticate, the plugin saves some data in the session in the form of an associative
array under the key 'FPCAuthenticationResult'. The keys and values of this associative array are the following :

$_SESSION['FPCAuthenticationResult']['authenticated'] = true if the authentication succeeded, false otherwise
$_SESSION['FPCAuthenticationResult']['login'] = the login og the user that tried to authenticate
$_SESSION['FPCAuthenticationResult']['roles'] = the array of string listing the roles attributed to the user, always null if the authentication failed
$_SESSION['FPCAuthenticationResult']['nbFailedAttempt'] = the number of successive failed authentication attempt made by this user.

The data should not be modified.

You can check the 'Examples' folder of the FPC AMFPHP Plugins package.